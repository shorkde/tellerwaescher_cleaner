// Generated by CoffeeScript 1.3.1
(function() {

  $(function() {
    window.FilterView = Backbone.View.extend({
      id: "FilterView",
      events: {
        'keyup input': 'keyLog'
      },
      initialize: function() {
        _.bindAll(this, 'render', 'getData', 'keyLog');
        return console.log("###", this.value);
      },
      keyLog: function() {
        console.log("keylog");
        if (typeof this.keyTimeout !== "undefined") {
          window.clearTimeout(this.keyTimeout);
        }
        return this.keyTimeout = window.setTimeout(this.getData, 500);
      },
      getData: function() {
        this.collection.query.searchstring = $('input', this.el).val();
        return this.collection.fetch();
      },
      render: function() {
        $(this.el).html(Mustache.to_html($("#FilterView-template").html(), {
          value: window.valueInput
        }));
        return this;
      }
    });
    window.SearchView = Backbone.View.extend({
      template: Utility.create_template("#SearchView-template"),
      initialize: function() {
        return window.ingrResultView = new IngrResultView({
          collection: this.collection
        });
      },
      render: function() {
        console.log("search view render");
        $(this.el).append(ingrResultView.render().el);
        this.collection.fetch();
        return this;
      }
    });
    window.IngrResultView = Backbone.View.extend({
      tagName: "table",
      className: "table table-striped table-bordered",
      id: "IngrResults",
      initialize: function() {
        _.bindAll(this, 'render');
        return this.collection.bind("reset", this.render);
      },
      render: function() {
        $(this.el).html("");
        this.collection.each(function(item) {
          var ingr;
          console.log("iterate");
          ingr = new IngrListElementView({
            model: item
          });
          return $("table#IngrResults").append(ingr.render().el);
        });
        return this;
      }
    });
    window.IngrListElementView = Backbone.View.extend({
      template: Utility.create_template("#IngredientListViewElement-template"),
      tagName: "tr",
      events: {
        'click': 'showDetails'
      },
      initialize: function() {
        return _.bindAll(this, 'render', 'showDetails');
      },
      render: function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
      },
      showDetails: function() {
        $('table#IngrResults tr').removeClass("active");
        $(this.el).addClass("active");
        this.ingrDetailView = new IngrDetailView({
          model: this.model
        });
        return $('#container').html(this.ingrDetailView.render().el);
      }
    });
    window.IngrDetailView = Backbone.View.extend({
      className: "row-fluid",
      initialize: function() {
        _.bindAll(this, 'render');
        this.nutritionListView = new NutritionsView({
          collection: new NutritionsCollection()
        });
        this.EANListView = new EANView({
          collection: new EANCollection()
        });
        this.CatsListView = new CatsView({
          collection: new CatsCollection()
        });
        this.submitButtonView = new SubmitButtonView;
        window.valueInput = this.model.get("title");
        return window.currentId = this.model.get("id");
      },
      render: function() {
        $(this.el).append(this.nutritionListView.render().el);
        $(this.el).append(this.EANListView.render().el);
        $(this.el).append(this.CatsListView.render().el);
        $(this.el).append(this.submitButtonView.render().el);
        this.nutritionListView.collection.query.searchstring = this.model.get("title");
        this.EANListView.collection.query.searchstring = this.model.get("title");
        this.CatsListView.collection.query.searchstring = "";
        this.nutritionListView.collection.fetch();
        this.EANListView.collection.fetch();
        this.CatsListView.collection.fetch();
        return this;
      }
    });
    window.NutritionsView = Backbone.View.extend({
      id: "Nutritions",
      className: "span4",
      initialize: function() {
        _.bindAll(this, 'render');
        this.filterView = new FilterView({
          collection: this.collection
        });
        return this.listView = new NutritionsListView({
          collection: this.collection
        });
      },
      render: function() {
        $(this.el).append("<h2>NÃ¤hrwerte</h2>");
        $(this.el).append(this.filterView.render().el);
        $(this.el).append(this.listView.render().el);
        return this;
      }
    });
    window.NutritionsListView = Backbone.View.extend({
      tagName: "table",
      className: "table table-striped table-bordered",
      id: "NutritionsResults",
      initialize: function() {
        _.bindAll(this, 'render');
        return this.collection.bind("reset", this.render);
      },
      render: function() {
        console.log("render nutr");
        $(".nutrItem:not(.selected)", this.el).parent().remove();
        this.collection.each(function(item) {
          var nutrition;
          nutrition = new NutritionsListElementView({
            model: item
          });
          return $("table#NutritionsResults").append(nutrition.render().el);
        });
        return this;
      }
    });
    window.NutritionsListElementView = Backbone.View.extend({
      template: Utility.create_template("#NutritionsListViewElement-template"),
      tagName: "tr",
      events: {
        "click": "mark"
      },
      initialize: function() {
        return _.bindAll(this, 'render');
      },
      render: function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
      },
      mark: function() {
        $(".nutrItem.selected").removeClass("selected");
        if ($(".nutrItem", this.el).hasClass("selected")) {
          return $(".nutrItem", this.el).removeClass("selected");
        } else {
          return $(".nutrItem", this.el).addClass("selected");
        }
      }
    });
    window.EANView = Backbone.View.extend({
      id: "EAN",
      className: "span4",
      initialize: function() {
        _.bindAll(this, 'render');
        this.filterView = new FilterView({
          collection: this.collection
        });
        return this.listView = new EANListView({
          collection: this.collection
        });
      },
      render: function() {
        $(this.el).append("<h2>EAN</h2>");
        $(this.el).append(this.filterView.render().el);
        $(this.el).append(this.listView.render().el);
        return this;
      }
    });
    window.EANListView = Backbone.View.extend({
      tagName: "table",
      className: "table table-striped table-bordered",
      id: "EANResults",
      initialize: function() {
        _.bindAll(this, 'render');
        return this.collection.bind("reset", this.render);
      },
      render: function() {
        console.log("render nutr");
        $(".eanItem:not(.selected)", this.el).parent().remove();
        this.collection.each(function(item) {
          var ean;
          ean = new EANListElementView({
            model: item
          });
          return $("table#EANResults").append(ean.render().el);
        });
        return this;
      }
    });
    window.EANListElementView = Backbone.View.extend({
      template: Utility.create_template("#EANListViewElement-template"),
      tagName: "tr",
      events: {
        "click": "mark"
      },
      initialize: function() {
        return _.bindAll(this, 'render', 'mark');
      },
      render: function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
      },
      mark: function() {
        if ($(".eanItem", this.el).hasClass("selected")) {
          return $(".eanItem", this.el).removeClass("selected");
        } else {
          return $(".eanItem", this.el).addClass("selected");
        }
      }
    });
    window.CatsView = Backbone.View.extend({
      id: "Cats",
      className: "span4",
      initialize: function() {
        _.bindAll(this, 'render');
        this.filterView = new FilterView({
          collection: this.collection,
          value: this.value
        });
        return this.listView = new CatsListView({
          collection: this.collection
        });
      },
      render: function() {
        $(this.el).append("<h2>Categories</h2>");
        $(this.el).append(this.filterView.render().el);
        $(this.el).append(this.listView.render().el);
        return this;
      }
    });
    window.CatsListView = Backbone.View.extend({
      tagName: "table",
      className: "table table-striped table-bordered",
      id: "CatsResults",
      initialize: function() {
        _.bindAll(this, 'render');
        return this.collection.bind("reset", this.render);
      },
      render: function() {
        console.log("render nutr");
        $(".catItem:not(.selected)", this.el).parent().remove();
        this.collection.each(function(item) {
          var cats;
          cats = new CatsListElementView({
            model: item
          });
          return $("table#CatsResults").append(cats.render().el);
        });
        return this;
      }
    });
    window.CatsListElementView = Backbone.View.extend({
      template: Utility.create_template("#CatsListViewElement-template"),
      tagName: "tr",
      events: {
        "click": "mark"
      },
      initialize: function() {
        return _.bindAll(this, 'render', 'mark');
      },
      render: function() {
        $(this.el).html(this.template(this.model.toJSON()));
        return this;
      },
      mark: function() {
        if ($(".catItem", this.el).hasClass("selected")) {
          return $(".catItem", this.el).removeClass("selected");
        } else {
          return $(".catItem", this.el).addClass("selected");
        }
      }
    });
    return window.SubmitButtonView = Backbone.View.extend({
      id: "submitButton",
      events: {
        'click': 'submit'
      },
      initialize: function() {
        return _.bindAll(this, 'render', 'submit');
      },
      render: function() {
        $(this.el).html("Submit");
        return this;
      },
      submit: function() {
        var cats, eans;
        if ($('.nutrItem.selected').length > 0 && $('.catItem.selected').length > 0) {
          cats = new Array();
          $('.catItem.selected').each(function(index) {
            return cats.push($(this).attr("data-id"));
          });
          eans = new Array();
          $('.eanItem.selected').each(function(index) {
            return eans.push($(this).attr("data-id"));
          });
          this.submitModel = new SubmitModel();
          this.submitModel.query.eans = eans;
          this.submitModel.query.ingredient_id = window.currentId;
          this.submitModel.query.ingredient_category_ids = cats;
          this.submitModel.query.nutrition_id = $('.nutrItem.selected').attr("data-id");
          this.submitModel.save();
          $('#IngrResults tr.active').next().click();
          return $('#IngrResults tr.active').prev().remove();
        } else {
          return alert("Bitte alles auswÃ¤hlen");
        }
      }
    });
  });

}).call(this);
